buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'jacoco'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

test {
	jacoco {
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
	}
}

test {
	jacoco {
		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	def Qdomains = []

	for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
		Qdomains.add(qPattern + '*') // ~/QA* , QA로 시작하는 모든 클래스
	}

	// 여기부터
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [] + Qdomains)
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 1
			}
		}
	}
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

}

tasks.named('test') {
	useJUnitPlatform()
}


//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝
